rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // users
    match /users/{userID} {
      allow get: if (isAuthenticated()
                  && isUserAuthenticated(userID)
                  && request.auth.token.firebase.sign_in_provider == 'google.com' || request.auth.token.firebase.sign_in_provider == 'anonymous');
      allow list: if isAuthenticated()
                  && isAdmin(request.auth.uid)
      allow create;
      allow update: if isAuthenticated()
                    && (isAdmin(request.auth.uid) || isUserAuthenticated(userID));
      allow delete: if isAuthenticated()
                    && isUserAuthenticated(userID);

      match /entries/{entryID} {
        allow read: if isAuthenticated()
                    && isUserAuthenticated(userID);
        allow create: if isAuthenticated()
                      && isUserAuthenticated(userID)
        allow delete: if isAuthenticated()
                      && isUserAuthenticated(userID)
      }
      match /votes/{voteID} {
        allow read, write: if true;
      }
      match /expenses/{expenseID} {
        allow read, write: if true;
      }
      match /orders/{orderID} {
        allow read, write: if true;
      }
    }

    // teams
    match /teams/{teamID} {
      allow get: if isAuthenticated()
                  && getData(documentPath(['users', request.auth.uid])).teamId == teamID;
      allow list: if isAuthenticated();
      allow create: if isAuthenticated();

      match /tournaments/{tournamentID} {
        allow read, write: if isAuthenticated();
      }
      match /expeditions/{expeditionID} {
        allow read, write: if true;
      }
      match /uniforms/{uniformID} {
        allow read, write: if true;
      }
      match /test/{testID} {
        allow read, write: if true;
      }
    }


    match /{path=**}/entries/{entryID} {
      allow read: if isAuthenticated()
                  && isAdmin(request.auth.uid);
    }

    match /{path=**}/votes/{voteID} {
      allow read: if isAuthenticated()
                  && isAdmin(request.auth.uid);
    }

    match /{path=**}/orders/{ordersID} {
      allow read: if isAuthenticated()
                  && isAdmin(request.auth.uid);
    }


    // helper functions
    function isAdmin(uid) {
      return getData(documentPath(['users', uid])).role == '管理者';
    }

    function documentPath(paths) {
      return path([['databases', database, 'documents'].join('/'), paths.join('/')].join('/'));
    }

    function isAuthenticated() {
      return request.auth != null;
    }

    function isUserAuthenticated(userID) {
      return request.auth.uid == userID;
    }

    function getData(path) {
      return get(path).data;
    }
  }
}
